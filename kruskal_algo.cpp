#include <bits/stdc++.h>using namespace std;#define int long long int#define pi (3.141592653589)#define mod 1000000007#define ll long long#define float double#define pb push_back#define mp make_pair#define fs first#define ss second#define all(c) c.begin(), c.end()#define min3(a, b, c) min(c, min(a, b))#define min4(a, b, c, d) min(d, min(c, min(a, b)))#define rrep(i, n) for(int i=n-1;i>=0;i--)#define rep(i,n) for(int i=0;i<n;i++)#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);bool isPrime(int n){    if(n==1) return false;    if(n==2) return true;    for(int i=2;i*i<=n;i++){        if(n%i==0)return false;    }    return true;}void c_p_c(){    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);#ifndef ONLINE_JUDGE    freopen("input.txt", "r", stdin);    freopen("output.txt", "w", stdout);#endif}bool compare(pair<pair<int,int>,int> a,pair<pair<int,int>,int> b) {   if(a.second < b.second) {       return true;   }   return false;}int find_set(int x,int parent[]) {    if(parent[x] == -1) {        return x;    }    return parent[x] = find_set(parent[x],parent);}void union_set(int x,int y,int parent[]) {        int s1 = find_set(x,parent);    int s2 = find_set(y,parent);    if(s1 != s2) {        parent[s2] = s1;    }}int32_t main(){c_p_c();int n,m;cin >> n >> m;int parent[n+1] = {0};vector<pair<pair<int,int>,int>> v;for(int i = 0; i <= n; i++) {    parent[i] += (-1);}for(int i = 0; i < m; i++) {    int x,y,wt;    cin >> x >> y >> wt;    v.pb(mp(mp(x,y),wt));}sort(v.begin(),v.end(),compare);int total_wt = 0;for(auto x : v) {        auto y = *(v.begin());    auto p = y.first;    auto c = y.second;    v.erase(v.begin());    int first_node = (p.first);    int second_node = (p.second);    int s1 = find_set(first_node,parent);    int s2 = find_set(second_node,parent);    if(s1 != s2) {       union_set(s1,s2,parent);       total_wt += (c);    }}cout << total_wt << endl;       return 0;}